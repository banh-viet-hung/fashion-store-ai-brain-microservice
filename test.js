import { StateGraph, END } from "@langchain/langgraph";
import { ChatGoogleGenerativeAI } from "@langchain/google-genai";
import { TavilySearchResults } from "@langchain/community/tools/tavily_search";
import { createReactAgent } from "@langchain/langgraph/prebuilt";
import { PromptTemplate } from "@langchain/core/prompts";
import { StringOutputParser } from "@langchain/core/output_parsers";
import "dotenv/config";

// State interface cho graph
class CommentModerationState {
    constructor() {
        this.comment = "";
        this.isObviouslyToxic = false;
        this.needsResearch = false;
        this.researchResults = "";
        this.finalResult = null;
        this.messages = [];
    }
}

// T·∫°o comment moderation agent
export async function createCommentModerationAgent(config = {}) {
    const {
        openaiApiKey,
        tavilyApiKey,
        model = "gemini-2.5-flash-preview-05-20",
        temperature = 0.1
    } = config;

    // Kh·ªüi t·∫°o LLM
    const llm = new ChatGoogleGenerativeAI({
        apiKey: openaiApiKey,
        model: model,
        temperature: temperature,
        maxOutputTokens: 4096,
    });

    // Kh·ªüi t·∫°o Tavily search tool
    const tavilyTool = new TavilySearchResults({
        apiKey: tavilyApiKey,
        maxResults: 5,
        searchDepth: "advanced"
    });

    // Template cho vi·ªác ph√¢n t√≠ch b√¨nh lu·∫≠n ban ƒë·∫ßu
    const initialAnalysisPrompt = PromptTemplate.fromTemplate(`
H√£y ph√¢n t√≠ch b√¨nh lu·∫≠n sau ƒë√¢y c·ªßa ng∆∞·ªùi d√πng Vi·ªát Nam:

B√¨nh lu·∫≠n: "{comment}"

Nhi·ªám v·ª• c·ªßa b·∫°n:
1. Ph√¢n t√≠ch ng·ªØ ƒëi·ªáu v√† gi·ªçng ƒëi·ªáu c·ªßa b√¨nh lu·∫≠n (ch√¢m bi·∫øm, gi·∫≠n d·ªØ, vui v·∫ª, ti√™u c·ª±c, v.v.)
2. X√°c ƒë·ªãnh xem b√¨nh lu·∫≠n n√†y c√≥ R√ï R√ÄNG l√† ƒë·ªôc h·∫°i, toxic, ti√™u c·ª±c, ph√¢n bi·ªát v√πng mi·ªÅn hay kh√¥ng
3. N·∫øu r√µ r√†ng l√† ƒë·ªôc h·∫°i ho·∫∑c c√≥ gi·ªçng ƒëi·ªáu ti√™u c·ª±c r√µ r·ªát ‚Üí tr·∫£ v·ªÅ "TOXIC"
4. N·∫øu c√≥ ch·ª©a ti·∫øng l√≥ng, vi·∫øt t·∫Øt, t·ª´ m·∫≠p m·ªù m√† b·∫°n kh√¥ng ch·∫Øc ch·∫Øn ‚Üí tr·∫£ v·ªÅ "NEEDS_RESEARCH"
5. N·∫øu b√¨nh th∆∞·ªùng, t√≠ch c·ª±c ‚Üí tr·∫£ v·ªÅ "SAFE"

L∆∞u √Ω ƒë·∫∑c bi·ªát v·ªÅ ph√¢n bi·ªát v√πng mi·ªÅn:
- C√°c t·ª´ nh∆∞ "backy", "b·∫Øc k·ª≥", "nam k·ª≥", ho·∫∑c b·∫•t k·ª≥ bi·∫øn th·ªÉ n√†o c·ªßa ch√∫ng th∆∞·ªùng mang t√≠nh ph√¢n bi·ªát v√πng mi·ªÅn
- Ngay c·∫£ khi c√¢u c√≥ v·∫ª trung t√≠nh, vi·ªác s·ª≠ d·ª•ng c√°c t·ª´ n√†y v·∫´n ƒë∆∞·ª£c xem l√† ph√¢n bi·ªát v√πng mi·ªÅn
- N·∫øu ph√°t hi·ªán c√°c t·ª´ n√†y, h√£y tr·∫£ v·ªÅ "TOXIC" ngay l·∫≠p t·ª©c
- C·∫ßn nh·∫°y c·∫£m v·ªõi c√°c c√°ch vi·∫øt bi·∫øn th·ªÉ ho·∫∑c ti·∫øng l√≥ng √°m ch·ªâ c√°c v√πng mi·ªÅn

L∆∞u √Ω chung: 
- ƒê√°nh gi√° c·∫£ ng·ªØ ƒëi·ªáu c·ªßa b√¨nh lu·∫≠n, kh√¥ng ch·ªâ d·ª±a v√†o t·ª´ ng·ªØ ƒë∆°n thu·∫ßn
- Ng·ªØ c·∫£nh vƒÉn h√≥a c·ªßa Vi·ªát Nam c√≥ th·ªÉ ·∫£nh h∆∞·ªüng ƒë·∫øn c√°ch di·ªÖn ƒë·∫°t

Ch·ªâ tr·∫£ v·ªÅ m·ªôt t·ª´: TOXIC, NEEDS_RESEARCH, ho·∫∑c SAFE

Ph√¢n t√≠ch:
`);

    // Template cho vi·ªác t·∫°o query t√¨m ki·∫øm
    const researchQueryPrompt = PromptTemplate.fromTemplate(`
B√¨nh lu·∫≠n: "{comment}"

Trong b√¨nh lu·∫≠n n√†y c√≥ c√°c t·ª´ l√≥ng/vi·∫øt t·∫Øt c·∫ßn t√¨m hi·ªÉu. H√£y x√°c ƒë·ªãnh ch√≠nh x√°c t·ª´ng t·ª´ l√≥ng ho·∫∑c vi·∫øt t·∫Øt c·∫ßn t√¨m hi·ªÉu.

ƒê·∫∑c bi·ªát ch√∫ √Ω ƒë·∫øn c√°c t·ª´ c√≥ th·ªÉ √°m ch·ªâ v√πng mi·ªÅn ho·∫∑c nh√≥m ng∆∞·ªùi c·ª• th·ªÉ, ch·∫≥ng h·∫°n:
- "backy" ‚Üí c√≥ th·ªÉ l√† c√°ch vi·∫øt kh√°c c·ªßa "B·∫Øc K·ª≥" (t·ª´ ch·ªâ ng∆∞·ªùi mi·ªÅn B·∫Øc, th∆∞·ªùng mang t√≠nh ph√¢n bi·ªát)
- C√°c t·ª´ t∆∞∆°ng t·ª± nh∆∞ "namky", "trungky" c≈©ng c·∫ßn ƒë∆∞·ª£c ph√¢n t√≠ch k·ªπ

T·∫°o m·ªôt c√¢u truy v·∫•n ng·∫Øn g·ªçn, t·ª± nhi√™n ƒë·ªÉ t√¨m hi·ªÉu √Ω nghƒ©a c·ªßa t·ª´ ƒë√≥. V√≠ d·ª•:
- N·∫øu c√≥ t·ª´ "vkl" ‚Üí "vkl l√† g√¨ trong ti·∫øng l√≥ng Vi·ªát Nam"
- N·∫øu c√≥ t·ª´ "backy" ‚Üí "backy c√≥ ph·∫£i l√† t·ª´ ph√¢n bi·ªát v√πng mi·ªÅn trong ti·∫øng Vi·ªát"

Ch·ªâ tr·∫£ v·ªÅ c√¢u truy v·∫•n ng·∫Øn g·ªçn, kh√¥ng gi·∫£i th√≠ch:
`);

    // Template cho vi·ªác ph√¢n t√≠ch k·∫øt qu·∫£ t√¨m ki·∫øm
    const finalAnalysisPrompt = PromptTemplate.fromTemplate(`
B√¨nh lu·∫≠n g·ªëc: "{comment}"

K·∫øt qu·∫£ t√¨m ki·∫øm v·ªÅ √Ω nghƒ©a c√°c t·ª´ l√≥ng/vi·∫øt t·∫Øt:
{researchResults}

D·ª±a tr√™n th√¥ng tin t√¨m ƒë∆∞·ª£c v√† c√°ch ph√¢n t√≠ch ng·ªØ ƒëi·ªáu, gi·ªçng ƒëi·ªáu c·ªßa b√¨nh lu·∫≠n, h√£y ƒë√°nh gi√° b√¨nh lu·∫≠n n√†y:

C√°c tr∆∞·ªùng h·ª£p C·∫¶N ƒê·∫∂C BI·ªÜT CH√ö √ù:

1. Ph√¢n bi·ªát v√πng mi·ªÅn:
   - C√°c t·ª´ nh∆∞ "backy", "b·∫Øc k·ª≥" ho·∫∑c b·∫•t k·ª≥ c√°ch vi·∫øt bi·∫øn th·ªÉ n√†o LU√îN ƒë∆∞·ª£c coi l√† ph√¢n bi·ªát v√πng mi·ªÅn
   - Ngay c·∫£ khi c√¢u n√≥i c√≥ v·∫ª trung t√≠nh ho·∫∑c mang t√≠nh h·ªèi han, vi·ªác s·ª≠ d·ª•ng nh·ªØng t·ª´ n√†y v·∫´n l√† ph√¢n bi·ªát v√πng mi·ªÅn
   - T∆∞∆°ng t·ª± v·ªõi "namky" (Nam K·ª≥) v√† c√°c bi·∫øn th·ªÉ kh√°c

2. Ti·∫øng l√≥ng x√∫c ph·∫°m:
   - Ngay c·∫£ khi ti·∫øng l√≥ng ƒë∆∞·ª£c d√πng nh∆∞ c√°ch n√≥i th√¥ng th∆∞·ªùng, n·∫øu g·ªëc c·ªßa t·ª´ mang t√≠nh x√∫c ph·∫°m, v·∫´n c·∫ßn ƒë√°nh d·∫•u l√† kh√¥ng an to√†n

Tr·∫£ v·ªÅ JSON v·ªõi format ch√≠nh x√°c nh∆∞ sau:
{{
  "pass": true/false,
  "reason": "l√Ω do c·ª• th·ªÉ n·∫øu kh√¥ng pass, null n·∫øu pass"
}}

Ti√™u ch√≠ ƒë√°nh gi√°:
- pass: false n·∫øu b√¨nh lu·∫≠n c√≥ n·ªôi dung ƒë·ªôc h·∫°i, toxic, x√∫c ph·∫°m, ph√¢n bi·ªát v√πng mi·ªÅn
- pass: false n·∫øu b√¨nh lu·∫≠n c√≥ gi·ªçng ƒëi·ªáu ch·∫ø gi·ªÖu, m·ªâa mai g√¢y t·ªïn th∆∞∆°ng
- pass: false n·∫øu b√¨nh lu·∫≠n s·ª≠ d·ª•ng c√°c t·ª´ nh∆∞ "backy", "b·∫Øc k·ª≥" v√† c√°c bi·∫øn th·ªÉ kh√°c
- pass: true n·∫øu b√¨nh lu·∫≠n b√¨nh th∆∞·ªùng, t√≠ch c·ª±c, ho·∫∑c t·ª´ l√≥ng ƒë∆∞·ª£c d√πng theo nghƒ©a t√≠ch c·ª±c/trung t√≠nh
- reason: gi·∫£i th√≠ch chi ti·∫øt v·ªÅ ƒë√°nh gi√° d·ª±a tr√™n ng·ªØ ƒëi·ªáu v√† t·ª´ ng·ªØ (n·∫øu kh√¥ng pass)
`);

    // Node: Ph√¢n t√≠ch ban ƒë·∫ßu
    async function initialAnalysis(state) {
        console.log("üîç Analyzing comment:", state.comment);

        // Ki·ªÉm tra nhanh c√°c t·ª´ nh·∫°y c·∫£m v·ªÅ v√πng mi·ªÅn
        const regionalTerms = ["backy", "b·∫Øc k·ª≥", "namky", "nam k·ª≥", "trungky", "trung k·ª≥"];

        // Ki·ªÉm tra kh√¥ng ph√¢n bi·ªát hoa th∆∞·ªùng
        const lowerComment = state.comment.toLowerCase();
        const hasRegionalTerm = regionalTerms.some(term => lowerComment.includes(term.toLowerCase()));

        if (hasRegionalTerm) {
            console.log("‚ö†Ô∏è Detected regional discrimination term");
            state.isObviouslyToxic = true;
            state.finalResult = {
                pass: false,
                reason: "B√¨nh lu·∫≠n c√≥ s·ª≠ d·ª•ng t·ª´ ng·ªØ mang t√≠nh ph√¢n bi·ªát v√πng mi·ªÅn"
            };
            return state;
        }

        const prompt = await initialAnalysisPrompt.format({ comment: state.comment });
        const result = await llm.invoke(prompt);
        const analysis = result.content.trim();

        console.log("üìä Initial analysis result:", analysis);

        if (analysis === "TOXIC") {
            state.isObviouslyToxic = true;
            state.finalResult = {
                pass: false,
                reason: "B√¨nh lu·∫≠n ch·ª©a n·ªôi dung r√µ r√†ng ƒë·ªôc h·∫°i, toxic ho·∫∑c ti√™u c·ª±c"
            };
        } else if (analysis === "NEEDS_RESEARCH") {
            state.needsResearch = true;
        } else {
            state.finalResult = {
                pass: true,
                reason: null
            };
        }

        return state;
    }

    // Node: T√¨m ki·∫øm th√¥ng tin
    async function researchSlang(state) {
        console.log("üîé Researching slang/abbreviations...");

        // T·∫°o query t√¨m ki·∫øm
        const queryPrompt = await researchQueryPrompt.format({ comment: state.comment });
        const queryResult = await llm.invoke(queryPrompt);
        const searchQuery = queryResult.content.trim();

        console.log("üîç Search query:", searchQuery);

        try {
            // Th·ª±c hi·ªán t√¨m ki·∫øm
            const searchResults = await tavilyTool.invoke(searchQuery);
            state.researchResults = Array.isArray(searchResults)
                ? searchResults.map(r => r.content || r.snippet || '').join('\n\n')
                : searchResults.toString();

            console.log("üìù Research results obtained");
        } catch (error) {
            console.error("‚ùå Search error:", error);
            state.researchResults = "Kh√¥ng th·ªÉ t√¨m ki·∫øm th√¥ng tin b·ªï sung";
        }

        return state;
    }

    // Node: Ph√¢n t√≠ch cu·ªëi c√πng
    async function finalAnalysis(state) {
        console.log("‚öñÔ∏è Performing final analysis...");

        const prompt = await finalAnalysisPrompt.format({
            comment: state.comment,
            researchResults: state.researchResults
        });

        const result = await llm.invoke(prompt);
        const output = result.content.trim();

        try {
            // Parse JSON result
            const jsonMatch = output.match(/\{[\s\S]*\}/);
            if (jsonMatch) {
                state.finalResult = JSON.parse(jsonMatch[0]);
            } else {
                throw new Error("No JSON found in response");
            }
        } catch (error) {
            console.error("‚ùå JSON parsing error:", error);
            state.finalResult = {
                pass: false,
                reason: "L·ªói trong vi·ªác ph√¢n t√≠ch b√¨nh lu·∫≠n"
            };
        }

        console.log("‚úÖ Final result:", state.finalResult);
        return state;
    }

    // ƒêi·ªÅu ki·ªán routing
    function shouldResearch(state) {
        return state.needsResearch ? "research" : "end";
    }

    function shouldAnalyze(state) {
        return state.isObviouslyToxic ? "end" : "final_analysis";
    }

    // T·∫°o graph
    const workflow = new StateGraph({
        channels: {
            comment: null,
            isObviouslyToxic: null,
            needsResearch: null,
            researchResults: null,
            finalResult: null,
            messages: null
        }
    });

    // Th√™m c√°c nodes
    workflow.addNode("initial_analysis", initialAnalysis);
    workflow.addNode("research", researchSlang);
    workflow.addNode("final_analysis", finalAnalysis);

    // Th√™m c√°c edges
    workflow.setEntryPoint("initial_analysis");

    workflow.addConditionalEdges(
        "initial_analysis",
        shouldResearch,
        {
            research: "research",
            end: END
        }
    );

    workflow.addConditionalEdges(
        "research",
        shouldAnalyze,
        {
            final_analysis: "final_analysis",
            end: END
        }
    );

    workflow.addEdge("final_analysis", END);

    // Compile graph
    const app = workflow.compile();

    // Return agent v·ªõi interface d·ªÖ s·ª≠ d·ª•ng
    return {
        async moderateComment(comment) {
            const initialState = new CommentModerationState();
            initialState.comment = comment;

            console.log("üöÄ Starting comment moderation for:", comment);

            const result = await app.invoke(initialState);

            console.log("üéØ Moderation completed");
            return result.finalResult;
        },

        // Expose graph ƒë·ªÉ c√≥ th·ªÉ stream ho·∫∑c debug
        graph: app
    };
}

// Utility functions
export function createModerationTools(tavilyApiKey) {
    return [
        new TavilySearchResults({
            apiKey: tavilyApiKey,
            maxResults: 5,
            searchDepth: "advanced",
            name: "slang_research",
            description: "T√¨m ki·∫øm th√¥ng tin v·ªÅ ti·∫øng l√≥ng v√† t·ª´ vi·∫øt t·∫Øt ti·∫øng Vi·ªát"
        })
    ];
}

// Example usage
async function example() {
    const agent = await createCommentModerationAgent({
        openaiApiKey: process.env.GOOGLE_API_KEY,
        tavilyApiKey: process.env.TAVILY_API_KEY
    });

    // Test cases
    const testComments = [
        "S·∫£n ph·∫©m n√†y r·∫•t t·ªët, t√¥i khuy√™n m·ªçi ng∆∞·ªùi n√™n mua",
        "ƒê·ªì r√°c vcl, shop l·ª´a ƒë·∫£o",
        "H√†ng oke, ship nhanh vcl",
        "Mi·ªÅn Nam th√¨ l√†m g√¨ c√≥ c√°i n√†y, ch·ªâ c√≥ mi·ªÅn B·∫Øc m·ªõi bi·∫øt th√¥i",
        "backy nay c≈©ng b√°n qu·∫ßn √°o n·ªØa h·∫£",
        "Ph·ª•c v·ª• r·∫•t t·ª≠ t·∫ø nh∆∞ng m√† gi√° h∆°i cao x√≠u",
        "Em n√†y xinh th·∫ø nh∆∞ng ch·∫Øc n√£o to√†n n∆∞·ªõc",
        "D·ªãch v·ª• kh√°ch h√†ng kh√° t·ªá, nh√¢n vi√™n thi·∫øu chuy√™n nghi·ªáp =))",
        "Qu·∫ßn √°o ch·∫•t l∆∞·ª£ng qu√° t·ªët, ƒë√°ng ƒë·ªìng ti·ªÅn b√°t g·∫°o",
        "Sao gi·ªù ai c≈©ng flex h√†ng hi·ªáu th·∫ø nh·ªâ, ng√°n ng·∫©m",
        "Th·ªùi trang n√†y ch·∫Øc ch·ªâ d√†nh cho d√¢n backy th√¥i",
        "M·∫´u √°o n√†y ƒë·∫πp th·∫≠t, m√† gi√° th√¨ B·∫Øc k·ª≥ m·ªõi mua n·ªïi",
        "Nam k·ª≥ m·∫∑c √°o n√†y tr√¥ng r·∫•t h·ª£p",
        'Em n√†y l√†m ·ªü bar m√† gi·ªù c≈©ng b√°n qu·∫ßn √°o n·ªØa haha'
    ];

    for (const comment of testComments) {
        console.log(`\n--- Testing: "${comment}" ---`);
        const result = await agent.moderateComment(comment);
        console.log("Result:", JSON.stringify(result, null, 2));
    }
}

example();

// Export ƒë·ªÉ s·ª≠ d·ª•ng
export { example };