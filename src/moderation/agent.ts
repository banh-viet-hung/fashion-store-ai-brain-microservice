import { StateGraph, END, StateGraphArgs } from "@langchain/langgraph";
import { ChatGoogleGenerativeAI } from "@langchain/google-genai";
import { TavilySearchResults } from "@langchain/community/tools/tavily_search";
import { PromptTemplate } from "@langchain/core/prompts";

// This is a simplified, direct implementation to avoid complex typing issues.

export function createCommentModerationAgent(config: any = {}) {
    const {
        googleApiKey,
        tavilyApiKey,
        model = "gemini-2.5-flash-preview-05-20",
        temperature = 0.1
    } = config;

    if (!googleApiKey || !tavilyApiKey) {
        throw new Error("Google and Tavily API keys are required for the moderation agent.");
    }

    const llm = new ChatGoogleGenerativeAI({ apiKey: googleApiKey, model, temperature });
    const tavilyTool = new TavilySearchResults({ apiKey: tavilyApiKey, maxResults: 5 });

    // All prompts remain the same
    const initialAnalysisPrompt = PromptTemplate.fromTemplate(
        `H√£y ph√¢n t√≠ch b√¨nh lu·∫≠n sau ƒë√¢y c·ªßa ng∆∞·ªùi d√πng Vi·ªát Nam:

B√¨nh lu·∫≠n: "{comment}"

Nhi·ªám v·ª• c·ªßa b·∫°n:
1. Ph√¢n t√≠ch ng·ªØ ƒëi·ªáu v√† gi·ªçng ƒëi·ªáu c·ªßa b√¨nh lu·∫≠n (ch√¢m bi·∫øm, gi·∫≠n d·ªØ, vui v·∫ª, ti√™u c·ª±c, v.v.)
2. X√°c ƒë·ªãnh xem b√¨nh lu·∫≠n n√†y c√≥ R√ï R√ÄNG l√† ƒë·ªôc h·∫°i, toxic, ti√™u c·ª±c, ph√¢n bi·ªát v√πng mi·ªÅn hay kh√¥ng
3. N·∫øu r√µ r√†ng l√† ƒë·ªôc h·∫°i ho·∫∑c c√≥ gi·ªçng ƒëi·ªáu ti√™u c·ª±c r√µ r·ªát ‚Üí tr·∫£ v·ªÅ "TOXIC"
4. N·∫øu c√≥ ch·ª©a ti·∫øng l√≥ng, vi·∫øt t·∫Øt, t·ª´ m·∫≠p m·ªù m√† b·∫°n kh√¥ng ch·∫Øc ch·∫Øn ‚Üí tr·∫£ v·ªÅ "NEEDS_RESEARCH"
5. N·∫øu b√¨nh th∆∞·ªùng, t√≠ch c·ª±c ‚Üí tr·∫£ v·ªÅ "SAFE"

L∆∞u √Ω ƒë·∫∑c bi·ªát v·ªÅ ph√¢n bi·ªát v√πng mi·ªÅn:
- C√°c t·ª´ nh∆∞ "backy", "b·∫Øc k·ª≥", "nam k·ª≥", ho·∫∑c b·∫•t k·ª≥ bi·∫øn th·ªÉ n√†o c·ªßa ch√∫ng th∆∞·ªùng mang t√≠nh ph√¢n bi·ªát v√πng mi·ªÅn
- Ngay c·∫£ khi c√¢u c√≥ v·∫ª trung t√≠nh, vi·ªác s·ª≠ d·ª•ng c√°c t·ª´ n√†y v·∫´n ƒë∆∞·ª£c xem l√† ph√¢n bi·ªát v√πng mi·ªÅn
- N·∫øu ph√°t hi·ªán c√°c t·ª´ n√†y, h√£y tr·∫£ v·ªÅ "TOXIC" ngay l·∫≠p t·ª©c
- C·∫ßn nh·∫°y c·∫£m v·ªõi c√°c c√°ch vi·∫øt bi·∫øn th·ªÉ ho·∫∑c ti·∫øng l√≥ng √°m ch·ªâ c√°c v√πng mi·ªÅn

L∆∞u √Ω chung: 
- ƒê√°nh gi√° c·∫£ ng·ªØ ƒëi·ªáu c·ªßa b√¨nh lu·∫≠n, kh√¥ng ch·ªâ d·ª±a v√†o t·ª´ ng·ªØ ƒë∆°n thu·∫ßn
- Ng·ªØ c·∫£nh vƒÉn h√≥a c·ªßa Vi·ªát Nam c√≥ th·ªÉ ·∫£nh h∆∞·ªüng ƒë·∫øn c√°ch di·ªÖn ƒë·∫°t

Ch·ªâ tr·∫£ v·ªÅ m·ªôt t·ª´: TOXIC, NEEDS_RESEARCH, ho·∫∑c SAFE

Ph√¢n t√≠ch:`
    );

    const researchQueryPrompt = PromptTemplate.fromTemplate(
        `B√¨nh lu·∫≠n: "{comment}"

Trong b√¨nh lu·∫≠n n√†y c√≥ c√°c t·ª´ l√≥ng/vi·∫øt t·∫Øt c·∫ßn t√¨m hi·ªÉu. H√£y x√°c ƒë·ªãnh ch√≠nh x√°c t·ª´ng t·ª´ l√≥ng ho·∫∑c vi·∫øt t·∫Øt c·∫ßn t√¨m hi·ªÉu.

ƒê·∫∑c bi·ªát ch√∫ √Ω ƒë·∫øn c√°c t·ª´ c√≥ th·ªÉ √°m ch·ªâ v√πng mi·ªÅn ho·∫∑c nh√≥m ng∆∞·ªùi c·ª• th·ªÉ, ch·∫≥ng h·∫°n:
- "backy" ‚Üí c√≥ th·ªÉ l√† c√°ch vi·∫øt kh√°c c·ªßa "B·∫Øc K·ª≥" (t·ª´ ch·ªâ ng∆∞·ªùi mi·ªÅn B·∫Øc, th∆∞·ªùng mang t√≠nh ph√¢n bi·ªát)
- C√°c t·ª´ t∆∞∆°ng t·ª± nh∆∞ "namky", "trungky" c≈©ng c·∫ßn ƒë∆∞·ª£c ph√¢n t√≠ch k·ªπ

T·∫°o m·ªôt c√¢u truy v·∫•n ng·∫Øn g·ªçn, t·ª± nhi√™n ƒë·ªÉ t√¨m hi·ªÉu √Ω nghƒ©a c·ªßa t·ª´ ƒë√≥. V√≠ d·ª•:
- N·∫øu c√≥ t·ª´ "vkl" ‚Üí "vkl l√† g√¨ trong ti·∫øng l√≥ng Vi·ªát Nam"
- N·∫øu c√≥ t·ª´ "backy" ‚Üí "backy c√≥ ph·∫£i l√† t·ª´ ph√¢n bi·ªát v√πng mi·ªÅn trong ti·∫øng Vi·ªát"

Ch·ªâ tr·∫£ v·ªÅ c√¢u truy v·∫•n ng·∫Øn g·ªçn, kh√¥ng gi·∫£i th√≠ch:`
    );

    const finalAnalysisPrompt = PromptTemplate.fromTemplate(
        `B√¨nh lu·∫≠n g·ªëc: "{comment}"

K·∫øt qu·∫£ t√¨m ki·∫øm v·ªÅ √Ω nghƒ©a c√°c t·ª´ l√≥ng/vi·∫øt t·∫Øt:
{researchResults}

D·ª±a tr√™n th√¥ng tin t√¨m ƒë∆∞·ª£c v√† c√°ch ph√¢n t√≠ch ng·ªØ ƒëi·ªáu, gi·ªçng ƒëi·ªáu c·ªßa b√¨nh lu·∫≠n, h√£y ƒë√°nh gi√° b√¨nh lu·∫≠n n√†y:

C√°c tr∆∞·ªùng h·ª£p C·∫¶N ƒê·∫∂C BI·ªÜT CH√ö √ù:

1. Ph√¢n bi·ªát v√πng mi·ªÅn:
   - C√°c t·ª´ nh∆∞ "backy", "b·∫Øc k·ª≥" ho·∫∑c b·∫•t k·ª≥ c√°ch vi·∫øt bi·∫øn th·ªÉ n√†o LU√îN ƒë∆∞·ª£c coi l√† ph√¢n bi·ªát v√πng mi·ªÅn
   - Ngay c·∫£ khi c√¢u n√≥i c√≥ v·∫ª trung t√≠nh ho·∫∑c mang t√≠nh h·ªèi han, vi·ªác s·ª≠ d·ª•ng nh·ªØng t·ª´ n√†y v·∫´n l√† ph√¢n bi·ªát v√πng mi·ªÅn
   - T∆∞∆°ng t·ª± v·ªõi "namky" (Nam K·ª≥) v√† c√°c bi·∫øn th·ªÉ kh√°c

2. Ti·∫øng l√≥ng x√∫c ph·∫°m:
   - Ngay c·∫£ khi ti·∫øng l√≥ng ƒë∆∞·ª£c d√πng nh∆∞ c√°ch n√≥i th√¥ng th∆∞·ªùng, n·∫øu g·ªëc c·ªßa t·ª´ mang t√≠nh x√∫c ph·∫°m, v·∫´n c·∫ßn ƒë√°nh d·∫•u l√† kh√¥ng an to√†n

Tr·∫£ v·ªÅ JSON v·ªõi format ch√≠nh x√°c nh∆∞ sau:
{{
  "pass": true/false,
  "reason": "l√Ω do c·ª• th·ªÉ n·∫øu kh√¥ng pass, null n·∫øu pass"
}}

Ti√™u ch√≠ ƒë√°nh gi√°:
- pass: false n·∫øu b√¨nh lu·∫≠n c√≥ n·ªôi dung ƒë·ªôc h·∫°i, toxic, x√∫c ph·∫°m, ph√¢n bi·ªát v√πng mi·ªÅn
- pass: false n·∫øu b√¨nh lu·∫≠n c√≥ gi·ªçng ƒëi·ªáu ch·∫ø gi·ªÖu, m·ªâa mai g√¢y t·ªïn th∆∞∆°ng
- pass: false n·∫øu b√¨nh lu·∫≠n s·ª≠ d·ª•ng c√°c t·ª´ nh∆∞ "backy", "b·∫Øc k·ª≥" v√† c√°c bi·∫øn th·ªÉ kh√°c
- pass: true n·∫øu b√¨nh lu·∫≠n b√¨nh th∆∞·ªùng, t√≠ch c·ª±c, ho·∫∑c t·ª´ l√≥ng ƒë∆∞·ª£c d√πng theo nghƒ©a t√≠ch c·ª±c/trung t√≠nh
- reason: gi·∫£i th√≠ch chi ti·∫øt v·ªÅ ƒë√°nh gi√° d·ª±a tr√™n ng·ªØ ƒëi·ªáu v√† t·ª´ ng·ªØ (n·∫øu kh√¥ng pass)
`);

    return {
        async moderateComment(comment: string) {
            console.log("üöÄ [Moderation] Starting moderation for:", comment);

            // 1. Direct check for regional terms
            const regionalTerms = ["backy", "b·∫Øc k·ª≥", "namky", "nam k·ª≥", "trungky", "trung k·ª≥"];
            const lowerComment = comment.toLowerCase();
            if (regionalTerms.some(term => lowerComment.includes(term))) {
                console.log("‚ö†Ô∏è [Moderation] Detected regional discrimination term");
                return { pass: false, reason: "B√¨nh lu·∫≠n c√≥ s·ª≠ d·ª•ng t·ª´ ng·ªØ mang t√≠nh ph√¢n bi·ªát v√πng mi·ªÅn" };
            }

            // 2. Initial analysis
            console.log("üîç [Moderation] Analyzing comment...");
            const initialPrompt = await initialAnalysisPrompt.format({ comment });
            const initialResult = await llm.invoke(initialPrompt);
            const analysis = initialResult.content.toString().trim();
            console.log("üìä [Moderation] Initial analysis result:", analysis);

            if (analysis === "SAFE") {
                return { pass: true, reason: null };
            }
            if (analysis === "TOXIC") {
                return { pass: false, reason: "B√¨nh lu·∫≠n ch·ª©a n·ªôi dung r√µ r√†ng ƒë·ªôc h·∫°i, toxic ho·∫∑c ti√™u c·ª±c" };
            }

            // 3. Needs research
            if (analysis === "NEEDS_RESEARCH") {
                console.log("üîé [Moderation] Researching slang/abbreviations...");
                const queryPrompt = await researchQueryPrompt.format({ comment });
                const queryResult = await llm.invoke(queryPrompt);
                const searchQuery = queryResult.content.toString().trim();
                console.log("üîç [Moderation] Search query:", searchQuery);

                let researchResults = "";
                try {
                    const searchResults = await tavilyTool.invoke(searchQuery);
                    researchResults = Array.isArray(searchResults)
                        ? searchResults.map(r => r.content || r.snippet || '').join('\n\n')
                        : searchResults.toString();
                    console.log("üìù [Moderation] Research results obtained");
                } catch (error) {
                    console.error("‚ùå [Moderation] Search error:", error);
                    researchResults = "Kh√¥ng th·ªÉ t√¨m ki·∫øm th√¥ng tin b·ªï sung";
                }

                // 4. Final analysis after research
                console.log("‚öñÔ∏è [Moderation] Performing final analysis...");
                const finalPrompt = await finalAnalysisPrompt.format({ comment, researchResults });
                const finalResult = await llm.invoke(finalPrompt);
                const output = finalResult.content.toString().trim();

                try {
                    const jsonMatch = output.match(/\{[\s\S]*\}/);
                    if (jsonMatch) {
                        const finalJson = JSON.parse(jsonMatch[0]);
                        console.log("‚úÖ [Moderation] Final result:", finalJson);
                        return finalJson;
                    }
                    throw new Error("No JSON found in response");
                } catch (error) {
                    console.error("‚ùå [Moderation] JSON parsing error:", error);
                    return { pass: false, reason: "L·ªói trong vi·ªác ph√¢n t√≠ch b√¨nh lu·∫≠n" };
                }
            }

            // Fallback
            return { pass: true, reason: "Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c, t·∫°m th·ªùi ch·∫•p nh·∫≠n" };
        }
    };
} 